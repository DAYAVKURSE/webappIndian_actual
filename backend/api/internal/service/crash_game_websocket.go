package service

import (
	"BlessedApi/cmd/db"
	"BlessedApi/internal/middleware"
	"BlessedApi/internal/models"
	"BlessedApi/pkg/logger"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/gorilla/websocket"
	"gorm.io/gorm"
)

var CrashGameWS *CrashGameWebsocketService

func init() {
	CrashGameWS = NewCrashGameWebsocketService()
}

type CrashGameWebsocketService struct {
	connections      map[int64]*websocket.Conn
	mu               sync.Mutex
	lastActivityTime map[int64]time.Time
	bets             map[int64]*models.CrashGameBet
	betCount         int
}

func NewCrashGameWebsocketService() *CrashGameWebsocketService {
	service := &CrashGameWebsocketService{
		connections:      make(map[int64]*websocket.Conn),
		lastActivityTime: make(map[int64]time.Time),
		bets:             make(map[int64]*models.CrashGameBet),
		betCount:         0,
	}
	go service.cleanupInactiveConnections()
	return service
}

func (w *CrashGameWebsocketService) cleanupInactiveConnections() {
	ticker := time.NewTicker(5 * time.Minute)
	defer ticker.Stop()

	for range ticker.C {
		w.mu.Lock()
		now := time.Now()
		for userId, lastActivity := range w.lastActivityTime {
			if now.Sub(lastActivity) > 30*time.Minute {
				if conn, ok := w.connections[userId]; ok {
					conn.Close()
					delete(w.connections, userId)
					delete(w.lastActivityTime, userId)
				}
			}
		}
		w.mu.Unlock()
	}
}

func (w *CrashGameWebsocketService) LiveCrashGameWebsocketHandler(c *gin.Context) {
	logger.Info("New WebSocket connection attempt from IP: %s", c.ClientIP())

	userId, err := middleware.GetUserIDFromGinContext(c)
	if err != nil {
		logger.Error("Error retrieving user ID: %v", err)
		c.Status(500)
		return
	}

	if userId == 0 {
		logger.Warn("Invalid userId: 0, skipping WebSocket connection")
		c.JSON(400, gin.H{"error": "Invalid user ID"})
		return
	}

	logger.Info("User %d authenticated successfully", userId)

	conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		logger.Error("WebSocket upgrade failed for user %d: %v", userId, err)
		return
	}

	w.mu.Lock()
	if existingConn, ok := w.connections[userId]; ok {
		logger.Info("Closing existing connection for user %d", userId)
		existingConn.Close()
	}
	w.connections[userId] = conn
	w.lastActivityTime[userId] = time.Now()
	w.betCount++
	w.mu.Unlock()

	logger.Info("User %d connected to WebSocket successfully", userId)

	// Send initial connection success message
	conn.WriteJSON(gin.H{
		"type":    "connection_success",
		"message": "Connected to game server",
	})

	defer func() {
		w.mu.Lock()
		delete(w.connections, userId)
		delete(w.lastActivityTime, userId)
		w.mu.Unlock()
		conn.Close()
		logger.Info("User %d disconnected from WebSocket", userId)
	}()

	for {
		_, message, err := conn.ReadMessage()
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				logger.Error("WebSocket read error for user %d: %v", userId, err)
			}
			break
		}

		w.mu.Lock()
		w.lastActivityTime[userId] = time.Now()
		w.mu.Unlock()

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
		if len(message) > 0 {
			logger.Info("Received message from user %d: %s", userId, string(message))
		}
	}
}

func (w *CrashGameWebsocketService) GetUserLatestBet(userId int64) (*models.CrashGameBet, error) {
	var bet models.CrashGameBet
	if err := db.DB.Where("user_id = ?", userId).Order("id desc").First(&bet).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			logger.Warn("No bets found for user %d", userId)
			return nil, nil
		}
		logger.Error("Error fetching latest bet for user %d: %v", userId, err)
		return nil, err
	}
	return &bet, nil
}

func (ws *CrashGameWebsocketService) HandleBet(userId int64, bet *models.CrashGameBet) {
	ws.mu.Lock()
	ws.bets[userId] = bet
	ws.mu.Unlock()

	ws.SendBetToUser(bet)
}

func (ws *CrashGameWebsocketService) SendBetToUser(bet *models.CrashGameBet) {
	var user models.User
	err := db.DB.First(&user, bet.UserID).Error
	if err != nil && errors.Is(err, gorm.ErrRecordNotFound) {
		logger.Error("%v", err)
		return
	}

	ws.mu.Lock()
	defer ws.mu.Unlock()

	if conn, ok := ws.connections[bet.UserID]; ok {
		betInfo := gin.H{
			"type":                    "new_bet",
			"username":                user.Nickname,
			"amount":                  bet.Amount,
			"auto_cashout_multiplier": bet.CashOutMultiplier,
			"is_benefit_bet":          bet.IsBenefitBet,
		}

		err := conn.WriteJSON(betInfo)
		if err != nil {
			logger.Error("Failed to send bet info: %v", err)
			conn.Close()
		}
	}
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
var (
	lastGlobalMultiplier  float64 = 0.0
	stuckGameCount        int     = 0
	lastGameTime          time.Time
	isRecoveringFromStuck bool = false
)

// ForceRestartGame –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é
func (ws *CrashGameWebsocketService) ForceRestartGame(currentGame *models.CrashGame) {
	logger.Warn("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –ó–ê–í–ò–°–®–ï–ô –ò–ì–†–´ üö®")

	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É —Å —Ç–µ–∫—É—â–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
	ws.BroadcastGameCrash(lastGlobalMultiplier)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
	ws.mu.Lock()
	for userId, bet := range ws.bets {
		if bet.Status == "active" {
			logger.Info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –≤ –∑–∞–≤–∏—Å—à–µ–π –∏–≥—Ä–µ", userId)
			bet.Status = "lost"
			db.DB.Save(bet)
			// –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫
			delete(ws.bets, userId)
		}
	}
	ws.mu.Unlock()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É
	isRecoveringFromStuck = true
	stuckGameCount++

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Å–±—Ä–æ—Å–µ –∏–≥—Ä—ã
	ws.mu.Lock()
	resetMessage := gin.H{
		"type":          "game_reset",
		"message":       "–ò–≥—Ä–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º",
		"restart_count": stuckGameCount,
	}

	for userId, conn := range ws.connections {
		err := conn.WriteJSON(resetMessage)
		if err != nil {
			logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userId, err)
			conn.Close()
			delete(ws.connections, userId)
		}
	}
	ws.mu.Unlock()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
	go func() {
		time.Sleep(2 * time.Second)
		// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é StartCrashGame –Ω–∞–ø—Ä—è–º—É—é
		go StartCrashGame()
	}()
}

func (ws *CrashGameWebsocketService) SendMultiplierToUser(currentGame *models.CrashGame) {
	logger.Info("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–ª—è –∏–≥—Ä—ã %d —Å —Ç–æ—á–∫–æ–π –∫—Ä–∞—à–∞ %.2f",
		currentGame.ID, currentGame.CrashPointMultiplier)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ crash point
	if currentGame.CrashPointMultiplier <= 0 {
		logger.Error("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫—Ä–∞—à–∞: %.2f, –∏–≥—Ä–∞ %d",
			currentGame.CrashPointMultiplier, currentGame.ID)
		currentGame.CrashPointMultiplier = 1.5
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±—ç–∫–¥–æ—Ä-—Å—Ç–∞–≤–æ–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞
	ws.mu.Lock()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –±—ç–∫–¥–æ—Ä–æ–º
	backdoorExists := false
	backdoorType := ""
	targetCrashPoint := currentGame.CrashPointMultiplier

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–¥–æ—Ä—ã
	for _, bet := range ws.bets {
		if bet.Status != "active" {
			continue
		}

		// –í–∞–∂–Ω—ã–µ –±—ç–∫–¥–æ—Ä—ã —Å –ø—Ä—è–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
		if math.Abs(bet.Amount-538.0) < 0.1 {
			targetCrashPoint = 32.0
			backdoorExists = true
			backdoorType = "538"
			logger.Info("–û–ë–ù–ê–†–£–ñ–ï–ù –ë–≠–ö–î–û–† 538: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è 32.0 –¥–ª—è –∏–≥—Ä—ã %d", currentGame.ID)
			break
		} else if math.Abs(bet.Amount-76.0) < 0.1 {
			targetCrashPoint = 1.5
			backdoorExists = true
			backdoorType = "76"
			logger.Info("–û–ë–ù–ê–†–£–ñ–ï–ù –ë–≠–ö–î–û–† 76: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è 1.5 –¥–ª—è –∏–≥—Ä—ã %d", currentGame.ID)
			break
		} else if math.Abs(bet.Amount-228.0) < 0.1 {
			targetCrashPoint = 1.5
			backdoorExists = true
			backdoorType = "228"
			logger.Info("–û–ë–ù–ê–†–£–ñ–ï–ù –ë–≠–ö–î–û–† 228: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è 1.5 –¥–ª—è –∏–≥—Ä—ã %d", currentGame.ID)
			break
		} else {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—ç–∫–¥–æ—Ä—ã
			intAmount := int(math.Round(bet.Amount))
			if multiplier, exists := models.GetCrashPoints()[intAmount]; exists {
				targetCrashPoint = multiplier
				backdoorExists = true
				backdoorType = fmt.Sprintf("%d", intAmount)
				logger.Info("–û–ë–ù–ê–†–£–ñ–ï–ù –ë–≠–ö–î–û–† %s: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è %.2f –¥–ª—è –∏–≥—Ä—ã %d",
					backdoorType, multiplier, currentGame.ID)
				break
			}
		}
	}

	// –§–∏–∫—Å–∏—Ä—É–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –ë–î
	if backdoorExists {
		currentGame.CrashPointMultiplier = targetCrashPoint
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
		if err := db.DB.Exec("UPDATE crash_games SET crash_point_multiplier = ? WHERE id = ?",
			targetCrashPoint, currentGame.ID).Error; err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤ –ë–î: %v", err)
		} else {
			logger.Info("–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—å %.2f –¥–ª—è –∏–≥—Ä—ã %d –≤ –ë–î", targetCrashPoint, currentGame.ID)
		}
	} else {
		logger.Info("–û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞ (–Ω–µ –±—ç–∫–¥–æ—Ä) —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º %.2f", targetCrashPoint)
	}

	// –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
	connections := make(map[int64]*websocket.Conn)
	for userId, conn := range ws.connections {
		connections[userId] = conn
	}
	ws.mu.Unlock()

	if len(connections) == 0 {
		logger.Info("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä—ã %d, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è", currentGame.ID)
		return
	}

	logger.Info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—è %d —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º, —Ü–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ –∫—Ä–∞—à–∞: %.2f",
		len(connections), targetCrashPoint)

	// –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
	currentMultiplier := 1.0
	lastSentMultiplier := 1.0
	startTime := time.Now()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
	var tickInterval time.Duration
	var incrementPerTick float64

	if backdoorExists {
		if backdoorType == "538" {
			// –î–ª—è –±—ç–∫–¥–æ—Ä–∞ 538 (–º–Ω–æ–∂–∏—Ç–µ–ª—å 32.0) - –æ—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			tickInterval = 20 * time.Millisecond
			incrementPerTick = 0.1 // –ü—Ä–∏—Ä–æ—Å—Ç –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∏–∫
		} else if targetCrashPoint < 2.0 {
			// –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –¥–ª—è –º–∞–ª—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π (1.5)
			tickInterval = 30 * time.Millisecond
			incrementPerTick = 0.05
		} else {
			// –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—ç–∫–¥–æ—Ä–æ–≤
			tickInterval = 40 * time.Millisecond
			incrementPerTick = 0.03
		}
	} else {
		// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä
		tickInterval = 50 * time.Millisecond
		incrementPerTick = 0.01
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
	ticker := time.NewTicker(tickInterval)
	defer ticker.Stop()

	// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—Å—é –∏–≥—Ä—É (2 –º–∏–Ω—É—Ç—ã)
	timeoutTimer := time.NewTimer(2 * time.Minute)
	defer timeoutTimer.Stop()

	// –°—Ç–æ—Ä–æ–∂–µ–≤–æ–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
	watchdogTimer := time.NewTimer(2 * time.Second)
	defer watchdogTimer.Stop()

	// –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–æ—Ä–æ–∂–µ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
	lastCheckedMultiplier := 1.0
	stuckCounter := 0

	// –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
	crashPointReached := false

multiplierUpdateLoop:
	for {
		select {
		case <-ticker.C:
			// –ù–∞ –∫–∞–∂–¥–æ–º —Ç–∏–∫–µ –ª–∏–Ω–µ–π–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É
			currentMultiplier += incrementPerTick

			// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ–º –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ —Ü–µ–ª–∏ –¥–ª—è –±—ç–∫–¥–æ—Ä–∞ 538
			if backdoorType == "538" && currentMultiplier > 10.0 {
				// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
				currentMultiplier += incrementPerTick * (currentMultiplier / 10.0)
			}

			// –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä –Ω–∞ –±–æ–ª—å—à–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö
			if !backdoorExists && currentMultiplier > 5.0 {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
				currentMultiplier += 0.01 * (currentMultiplier - 5.0)
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞
			if currentMultiplier >= targetCrashPoint {
				logger.Info("–ò–≥—Ä–∞ %d –¥–æ—Å—Ç–∏–≥–ª–∞ —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞: %.2f (—Ü–µ–ª—å: %.2f)",
					currentGame.ID, currentMultiplier, targetCrashPoint)
				crashPointReached = true
				ws.BroadcastGameCrash(targetCrashPoint)
				break multiplierUpdateLoop
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
			changeThreshold := 0.01
			if backdoorExists {
				changeThreshold = 0.005 // –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±—ç–∫–¥–æ—Ä–æ–≤
			}

			if math.Abs(currentMultiplier-lastSentMultiplier) > changeThreshold {
				multiplierInfo := gin.H{
					"type":       "multiplier_update",
					"multiplier": currentMultiplier,
					"timestamp":  time.Now().UnixNano() / int64(time.Millisecond),
					"elapsed":    time.Since(startTime).Seconds(),
				}

				// –§–∏–∫—Å–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–∫—ç—à–∞—É—Ç–∞
				sentMultiplier := currentMultiplier

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
				ws.mu.Lock()
				for userId, conn := range connections {
					// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∫—ç—à–∞—É—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
					if bet, exists := ws.bets[userId]; exists && bet.Status == "active" {
						if bet.CashOutMultiplier > 0 && sentMultiplier >= bet.CashOutMultiplier {
							logger.Info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫—ç—à–∞—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–∞ %.2fx", userId, sentMultiplier)
							if err := crashGameCashout(nil, bet, sentMultiplier); err != nil {
								logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–∫—ç—à–∞—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userId, err)
								continue
							}
							ws.ProcessCashout(userId, sentMultiplier, true)
							continue
						}

						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
						err := conn.WriteJSON(multiplierInfo)
						if err != nil {
							logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userId, err)
							if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
								conn.Close()
								delete(connections, userId)
								delete(ws.connections, userId)
							}
						}
					} else {
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è–º
						err := conn.WriteJSON(multiplierInfo)
						if err != nil {
							logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—é %d: %v", userId, err)
							if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
								conn.Close()
								delete(connections, userId)
								delete(ws.connections, userId)
							}
						}
					}
				}
				ws.mu.Unlock()

				// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
				lastSentMultiplier = currentMultiplier

				// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –±—ç–∫–¥–æ—Ä–æ–≤ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É –º–Ω–æ–∂–∏—Ç–µ–ª—é
				// (—á—Ç–æ–±—ã –Ω–µ –¥–∞—Ç—å –∑–∞–≤–∏—Å–Ω—É—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ)
				if backdoorExists && currentMultiplier > targetCrashPoint*0.9 && targetCrashPoint > 10.0 {
					logger.Info("–ë—ç–∫–¥–æ—Ä %s –¥–æ—Å—Ç–∏–≥ –≤—ã—Å–æ–∫–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è (%.2f), —É—Å–∫–æ—Ä—è–µ–º –¥–æ —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞",
						backdoorType, currentMultiplier)
					crashPointReached = true
					ws.BroadcastGameCrash(targetCrashPoint)
					break multiplierUpdateLoop
				}
			}

		case <-watchdogTimer.C:
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
			if math.Abs(currentMultiplier-lastCheckedMultiplier) < 0.05 {
				// –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–∏—Å–∞–Ω–∏–µ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
				stuckCounter++
				logger.Warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–∏—Å–∞–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –Ω–∞ %.2f (–ø–æ–ø—ã—Ç–∫–∞ %d), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ",
					currentMultiplier, stuckCounter)

				// –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç
				if backdoorType == "538" {
					// –î–ª—è –±—ç–∫–¥–æ—Ä–∞ 538 –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
					currentMultiplier += 0.5 * float64(stuckCounter)
				} else {
					currentMultiplier += 0.1 * float64(stuckCounter)
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
				multiplierInfo := gin.H{
					"type":       "multiplier_update",
					"multiplier": currentMultiplier,
					"timestamp":  time.Now().UnixNano() / int64(time.Millisecond),
					"elapsed":    time.Since(startTime).Seconds(),
				}

				ws.mu.Lock()
				for _, conn := range connections {
					err := conn.WriteJSON(multiplierInfo)
					if err != nil {
						logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è: %v", err)
					}
				}
				ws.mu.Unlock()

				lastSentMultiplier = currentMultiplier

				// –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
				if stuckCounter >= 3 {
					logger.Error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–∏—Å–∞–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ %.2f",
						currentMultiplier)
					crashPointReached = true

					// –î–ª—è –±—ç–∫–¥–æ—Ä–∞ 538 –≤—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞ —Ü–µ–ª–µ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏
					if backdoorType == "538" {
						ws.BroadcastGameCrash(targetCrashPoint)
					} else {
						ws.BroadcastGameCrash(currentMultiplier)
					}
					break multiplierUpdateLoop
				}
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
			lastCheckedMultiplier = currentMultiplier
			watchdogTimer.Reset(1 * time.Second) // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏

		case <-timeoutTimer.C:
			// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
			logger.Error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã (2 –º–∏–Ω—É—Ç—ã), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
			crashPointReached = true

			// –î–ª—è –±—ç–∫–¥–æ—Ä–∞ 538 –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
			if backdoorType == "538" {
				ws.BroadcastGameCrash(targetCrashPoint)
			} else {
				ws.BroadcastGameCrash(currentMultiplier)
			}
			break multiplierUpdateLoop
		}
	}

	// –ó–∞–≤–µ—Ä—à–∞—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
	if crashPointReached {
		logger.Info("–ò–≥—Ä–∞ %d –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ %.2f, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏",
			currentGame.ID, targetCrashPoint)
		ws.mu.Lock()
		for userId, bet := range ws.bets {
			if bet.Status == "active" {
				logger.Info("–ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞–≤–∫—É –∫–∞–∫ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—É—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userId)
				bet.Status = "lost"
				if err := db.DB.Save(&bet).Error; err != nil {
					logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userId, err)
				}
			}
		}
		ws.mu.Unlock()
	}
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—Ä–∞—Ö–µ –∏–≥—Ä—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (ws *CrashGameWebsocketService) BroadcastGameCrash(crashPoint float64) {
	ws.mu.Lock()
	defer ws.mu.Unlock()

	crashInfo := gin.H{
		"type":        "game_crash",
		"crash_point": crashPoint,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
	failedSendCount := 0

	for userId, conn := range ws.connections {
		err := conn.WriteJSON(crashInfo)
		if err != nil {
			logger.Error("Failed to send crash point to user %d: %v", userId, err)
			conn.Close()
			delete(ws.connections, userId)
			failedSendCount++
			continue
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
		if bet, ok := ws.bets[userId]; ok && bet.Status == "active" {
			bet.Status = "lost"
			if err := db.DB.Save(&bet).Error; err != nil {
				logger.Error("Failed to update lost bet for user %d: %v", userId, err)
			}
		}
	}

	// –ï—Å–ª–∏ –±—ã–ª–æ –±–æ–ª—å—à–µ 1/3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫, –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞–≤–∫–∏
	if failedSendCount > 0 && len(ws.connections) > 0 &&
		float64(failedSendCount)/float64(len(ws.connections)+failedSendCount) > 0.3 {
		logger.Warn("‚ö†Ô∏è High failure rate (%d/%d) when sending crash info. Resetting bets state.",
			failedSendCount, len(ws.connections)+failedSendCount)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞–≤–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ –∏–≥—Ä–∞–º–∏
		for userId, bet := range ws.bets {
			if bet.Status == "active" {
				logger.Info("Force resetting active bet for user %d", userId)
				bet.Status = "lost"
				db.DB.Save(bet)
			}
		}
	}
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (ws *CrashGameWebsocketService) BroadcastGameStarted() {
	ws.mu.Lock()
	defer ws.mu.Unlock()

	gameStartedInfo := gin.H{
		"type": "game_started",
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	activeConnections := 0
	oldConnections := 0

	// –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
	staleConnectionUserIds := []int64{}

	// –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º ID
	for userId, conn := range ws.connections {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–æ–π ping
		err := conn.WriteControl(websocket.PingMessage, []byte{}, time.Now().Add(time.Second))
		if err != nil {
			logger.Warn("Connection for user %d appears stale: %v", userId, err)
			staleConnectionUserIds = append(staleConnectionUserIds, userId)
			oldConnections++
		} else {
			activeConnections++
		}
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –∏—Ö
	if oldConnections > 0 {
		logger.Info("Cleaning up %d stale connections (active: %d)", oldConnections, activeConnections)
		for _, userId := range staleConnectionUserIds {
			if conn, ok := ws.connections[userId]; ok {
				conn.Close()
				delete(ws.connections, userId)
				delete(ws.lastActivityTime, userId)

				// –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				if bet, ok := ws.bets[userId]; ok && bet.Status == "active" {
					logger.Info("Resetting stale bet for user %d", userId)
					bet.Status = "lost"
					db.DB.Save(bet)
					delete(ws.bets, userId)
				}
			}
		}
	}

	// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
	for userId, conn := range ws.connections {
		err := conn.WriteJSON(gameStartedInfo)
		if err != nil {
			logger.Error("Failed to send game started to user %d: %v", userId, err)
			conn.Close()
			delete(ws.connections, userId)

			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
			if bet, ok := ws.bets[userId]; ok && bet.Status == "active" {
				bet.Status = "lost"
				db.DB.Save(bet)
				delete(ws.bets, userId)
			}
		}
	}
}

func (ws *CrashGameWebsocketService) ProcessCashout(userId int64, multiplier float64, isAuto bool) {
	bet, ok := ws.bets[userId]
	if !ok {
		logger.Warn("No active bet found for user %d during cashout", userId)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	var user models.User
	if err := db.DB.First(&user, userId).Error; err != nil {
		logger.Error("Failed to get user info for cashout: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—ç—à–∞—É—Ç–µ
	cashoutInfo := gin.H{
		"type":               "cashout_result",
		"cashout_multiplier": multiplier,
		"win_amount":         bet.WinAmount,
		"is_auto":            isAuto,
		"user_id":            userId,
		"username":           user.Nickname,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –∫—ç—à–∞—É—Ç
	//ws.mu.Lock()
	//defer ws.mu.Unlock()

	if conn, ok := ws.connections[userId]; ok {
		err := conn.WriteJSON(cashoutInfo)
		if err != nil {
			logger.Error("Failed to send cashout result to user %d: %v", userId, err)
			conn.Close()
			delete(ws.connections, userId)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—ç—à–∞—É—Ç–µ
	for otherUserId, conn := range ws.connections {
		if otherUserId != userId {
			otherUserInfo := gin.H{
				"type":               "other_cashout",
				"username":           user.Nickname,
				"cashout_multiplier": multiplier,
				"win_amount":         bet.WinAmount,
			}

			err := conn.WriteJSON(otherUserInfo)
			if err != nil {
				logger.Error("Failed to send cashout notification to user %d: %v", otherUserId, err)
				conn.Close()
				delete(ws.connections, otherUserId)
			}
		}
	}
}

func (ws *CrashGameWebsocketService) SendCrashPointToUser(userId int64, crashPoint float64) {
	ws.mu.Lock()
	defer ws.mu.Unlock()

	if conn, ok := ws.connections[userId]; ok {
		crashInfo := gin.H{
			"type":        "game_crash",
			"crash_point": crashPoint,
		}

		err := conn.WriteJSON(crashInfo)
		if err != nil {
			logger.Error("Failed to send crash point: %v", err)
			conn.Close()
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
		if bet, ok := ws.bets[userId]; ok && bet.Status == "active" {
			bet.Status = "lost"
			if err := db.DB.Save(&bet).Error; err != nil {
				logger.Error("Failed to update lost bet: %v", err)
			}
		}
	}
}

func (ws *CrashGameWebsocketService) addGameToHistory(game *models.CrashGame) error {
	var existingGame models.CrashGame
	if err := db.DB.Where("id = ?", game.ID).First(&existingGame).Error; err == nil {
		return nil
	} else if !errors.Is(err, gorm.ErrRecordNotFound) {
		return logger.WrapError(err, "failed to check existing game")
	}

	return db.DB.Transaction(func(tx *gorm.DB) error {
		if err := tx.Create(game).Error; err != nil {
			if strings.Contains(err.Error(), "duplicate key value") {
				return nil
			}
			return logger.WrapError(err, "failed to create game")
		}
		err := ws.maintainLast50CrashGames(tx)
		if err != nil {
			return logger.WrapError(err, "")
		}
		return nil
	})
}

func (ws *CrashGameWebsocketService) maintainLast50CrashGames(tx *gorm.DB) error {
	var count int64
	if err := tx.Model(&models.CrashGame{}).Count(&count).Error; err != nil {
		return logger.WrapError(err, "")
	}

	if count > 50 {
		var oldestGames []models.CrashGame
		if err := tx.Order("id asc").
			Limit(int(count - 50)).
			Find(&oldestGames).Error; err != nil {
			return logger.WrapError(err, "")
		}

		if err := tx.Delete(&oldestGames).Error; err != nil {
			return logger.WrapError(err, "")
		}
	}

	return nil
}

func (ws *CrashGameWebsocketService) GetLast50CrashGames(c *gin.Context) {
	var games []models.CrashGame
	err := db.DB.Where("start_time != ? AND end_time != ?", time.Time{}, time.Time{}).
		Order("start_time DESC").
		Limit(50).
		Find(&games).Error
	if err != nil {
		logger.Error("Failed to fetch last 50 crash games: %v", err)
		c.Status(500)
		return
	}

	c.JSON(200, gin.H{"results": games})
}

// SendCrashGameBetResultToUser sends the result of a bet to the user via WebSocket.
func (ws *CrashGameWebsocketService) SendCrashGameBetResultToUser(userId int64, bet models.CrashGameBet) {
	ws.mu.Lock()
	defer ws.mu.Unlock()

	if conn, ok := ws.connections[userId]; ok {
		resultInfo := gin.H{
			"type":                "bet_result",
			"bet_amount":          bet.Amount,
			"win_amount":          bet.WinAmount,
			"cash_out_multiplier": bet.CashOutMultiplier,
			"status":              bet.Status,
		}
		err := conn.WriteJSON(resultInfo)
		if err != nil {
			logger.Error("Failed to send bet result to user %d: %v", userId, err)
			conn.Close()
			delete(ws.connections, userId)
		}
	}
}
