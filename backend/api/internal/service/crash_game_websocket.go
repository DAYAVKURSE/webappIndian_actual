package service

import (
	"BlessedApi/cmd/db"
	"BlessedApi/internal/middleware"
	"BlessedApi/internal/models"
	"BlessedApi/pkg/logger"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/gorilla/websocket"
	"gorm.io/gorm"
)

var CrashGameWS *CrashGameWebsocketService

func init() {
	CrashGameWS = NewCrashGameWebsocketService()
}

type CrashGameWebsocketService struct {
	connections      map[int64]*websocket.Conn
	mu               sync.Mutex
	lastActivityTime map[int64]time.Time
	bets             map[int64]*models.CrashGameBet
	betCount         int
}

func NewCrashGameWebsocketService() *CrashGameWebsocketService {
	service := &CrashGameWebsocketService{
		connections:      make(map[int64]*websocket.Conn),
		lastActivityTime: make(map[int64]time.Time),
		bets:             make(map[int64]*models.CrashGameBet),
		betCount:         0,
	}
	go service.cleanupInactiveConnections()
	return service
}

func (w *CrashGameWebsocketService) cleanupInactiveConnections() {
	ticker := time.NewTicker(5 * time.Minute)
	defer ticker.Stop()

	for range ticker.C {
		w.mu.Lock()
		now := time.Now()
		for userId, lastActivity := range w.lastActivityTime {
			if now.Sub(lastActivity) > 30*time.Minute {
				if conn, ok := w.connections[userId]; ok {
					conn.Close()
					delete(w.connections, userId)
					delete(w.lastActivityTime, userId)
				}
			}
		}
		w.mu.Unlock()
	}
}

func (w *CrashGameWebsocketService) LiveCrashGameWebsocketHandler(c *gin.Context) {
	logger.Info("New WebSocket connection attempt from IP: %s", c.ClientIP())
	
	userId, err := middleware.GetUserIDFromGinContext(c)
	if err != nil {
		logger.Error("Error retrieving user ID: %v", err)
		c.Status(500)
		return
	}

	if userId == 0 {
		logger.Warn("Invalid userId: 0, skipping WebSocket connection")
		c.JSON(400, gin.H{"error": "Invalid user ID"})
		return
	}

	logger.Info("User %d authenticated successfully", userId)

	conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		logger.Error("WebSocket upgrade failed for user %d: %v", userId, err)
		return
	}

	w.mu.Lock()
	if existingConn, ok := w.connections[userId]; ok {
		logger.Info("Closing existing connection for user %d", userId)
		existingConn.Close()
	}
	w.connections[userId] = conn
	w.lastActivityTime[userId] = time.Now()
	w.betCount++
	w.mu.Unlock()

	logger.Info("User %d connected to WebSocket successfully", userId)

	// Send initial connection success message
	conn.WriteJSON(gin.H{
		"type": "connection_success",
		"message": "Connected to game server",
	})

	defer func() {
		w.mu.Lock()
		delete(w.connections, userId)
		delete(w.lastActivityTime, userId)
		w.mu.Unlock()
		conn.Close()
		logger.Info("User %d disconnected from WebSocket", userId)
	}()

	for {
		_, message, err := conn.ReadMessage()
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				logger.Error("WebSocket read error for user %d: %v", userId, err)
			}
			break
		}

		w.mu.Lock()
		w.lastActivityTime[userId] = time.Now()
		w.mu.Unlock()
		
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
		if len(message) > 0 {
			logger.Info("Received message from user %d: %s", userId, string(message))
		}
	}
}

func (w *CrashGameWebsocketService) GetUserLatestBet(userId int64) (*models.CrashGameBet, error) {
	var bet models.CrashGameBet
	if err := db.DB.Where("user_id = ?", userId).Order("id desc").First(&bet).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			logger.Warn("No bets found for user %d", userId)
			return nil, nil
		}
		logger.Error("Error fetching latest bet for user %d: %v", userId, err)
		return nil, err
	}
	return &bet, nil
}

func (ws *CrashGameWebsocketService) HandleBet(userId int64, bet *models.CrashGameBet) {
	ws.mu.Lock()
	ws.bets[userId] = bet
	ws.mu.Unlock()

	ws.SendBetToUser(bet)
}

func (ws *CrashGameWebsocketService) SendBetToUser(bet *models.CrashGameBet) {
	var user models.User
	err := db.DB.First(&user, bet.UserID).Error
	if err != nil && errors.Is(err, gorm.ErrRecordNotFound) {
		logger.Error("%v", err)
		return
	}
 
	ws.mu.Lock()
	defer ws.mu.Unlock()

	if conn, ok := ws.connections[bet.UserID]; ok {
		betInfo := gin.H{
			"type":                    "new_bet",
			"username":                user.Nickname,
			"amount":                  bet.Amount,
			"auto_cashout_multiplier": bet.CashOutMultiplier,
			"is_benefit_bet":          bet.IsBenefitBet,
		}

		err := conn.WriteJSON(betInfo)
		if err != nil {
			logger.Error("Failed to send bet info: %v", err)
			conn.Close()
		}
	}
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
var (
	lastGlobalMultiplier float64 = 0.0
	stuckGameCount       int     = 0
	lastGameTime         time.Time
	isRecoveringFromStuck bool = false
)

// ForceRestartGame –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é
func (ws *CrashGameWebsocketService) ForceRestartGame(currentGame *models.CrashGame) {
	logger.Warn("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –ó–ê–í–ò–°–®–ï–ô –ò–ì–†–´ üö®")
	
	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É —Å —Ç–µ–∫—É—â–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
	ws.BroadcastGameCrash(lastGlobalMultiplier)
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
	ws.mu.Lock()
	for userId, bet := range ws.bets {
		if bet.Status == "active" {
			logger.Info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –≤ –∑–∞–≤–∏—Å—à–µ–π –∏–≥—Ä–µ", userId)
			bet.Status = "lost"
			db.DB.Save(bet)
			// –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫
			delete(ws.bets, userId)
		}
	}
	ws.mu.Unlock()
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É
	isRecoveringFromStuck = true
	stuckGameCount++
	
	// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Å–±—Ä–æ—Å–µ –∏–≥—Ä—ã
	ws.mu.Lock()
	resetMessage := gin.H{
		"type": "game_reset",
		"message": "–ò–≥—Ä–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º",
		"restart_count": stuckGameCount,
	}
	
	for userId, conn := range ws.connections {
		err := conn.WriteJSON(resetMessage)
		if err != nil {
			logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userId, err)
			conn.Close()
			delete(ws.connections, userId)
		}
	}
	ws.mu.Unlock()
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
	go func() {
		time.Sleep(2 * time.Second)
		CrashGame.StartNewCrashGame()
	}()
}

func (ws *CrashGameWebsocketService) SendMultiplierToUser(currentGame *models.CrashGame) {
	logger.Info("Starting multiplier updates for game %d with crash point %.2f", 
		currentGame.ID, currentGame.CrashPointMultiplier)
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
	lastGameTime = time.Now()
	
	// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—ç–∫–¥–æ—Ä-–∏–≥—Ä
	static_backdoorCount := 0
	
	// –ü–æ—Å–ª–µ –∑–∞–≤–∏—Å–∞–Ω–∏—è —É—Å–∫–æ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
	if isRecoveringFromStuck {
		logger.Info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–∏—Å–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
		isRecoveringFromStuck = false
	}
	
	// –°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
	lastGlobalMultiplier = 1.0
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ—Ä–æ–∂–µ–≤–æ–π —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ–π –∏–≥—Ä—ã
	gameWatchdog := time.NewTimer(2 * time.Minute)
	defer gameWatchdog.Stop()
	
	go func() {
		select {
		case <-gameWatchdog.C:
			// –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª, –∑–Ω–∞—á–∏—Ç –∏–≥—Ä–∞ –∑–∞–≤–∏—Å–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
			logger.Error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ó–ê–í–ò–°–ê–ù–ò–ï: –∏–≥—Ä–∞ %d –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ 2 –º–∏–Ω—É—Ç—ã üö®", currentGame.ID)
			ws.ForceRestartGame(currentGame)
		}
	}()
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ crash point
	if currentGame.CrashPointMultiplier <= 0 {
		logger.Error("Invalid crash point multiplier: %.2f, game %d", 
			currentGame.CrashPointMultiplier, currentGame.ID)
		
		// –ß–∏—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã
		var gameFromDB models.CrashGame
		if err := db.DB.First(&gameFromDB, currentGame.ID).Error; err != nil {
			logger.Error("Failed to read game from DB: %v", err)
			return
		}
		
		if gameFromDB.CrashPointMultiplier <= 0 {
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
			currentGame.CrashPointMultiplier = 1.5
			logger.Info("Using fallback crash point: 1.5 for game %d", currentGame.ID)
		} else {
			currentGame.CrashPointMultiplier = gameFromDB.CrashPointMultiplier
			logger.Info("Using DB crash point: %.2f for game %d", 
				currentGame.CrashPointMultiplier, currentGame.ID)
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±—ç–∫–¥–æ—Ä-—Å—Ç–∞–≤–æ–∫
	ws.mu.Lock()
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –±—ç–∫–¥–æ—Ä–æ–º
	var backdoorExists bool
	var backdoorType string
	var isCriticalBackdoor bool
	var isLowMultiplierBackdoor bool
	
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±—ç–∫–¥–æ—Ä–æ–≤
	for _, bet := range ws.bets {
		if bet.Status != "active" {
			continue
		}
		
		// –í–∞–∂–Ω—ã–µ –±—ç–∫–¥–æ—Ä—ã —Å –ø—Ä—è–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
		if math.Abs(bet.Amount - 538.0) < 0.1 {
			currentGame.CrashPointMultiplier = 32.0
			backdoorExists = true
			backdoorType = "538"
			isCriticalBackdoor = true
			logger.Info("FORCED BACKDOOR 538 DETECTION: Setting multiplier to 32.0 for game %d", 
				currentGame.ID)
			static_backdoorCount++
			break
		} else if math.Abs(bet.Amount - 76.0) < 0.1 {
			currentGame.CrashPointMultiplier = 1.5
			backdoorExists = true
			backdoorType = "76"
			isLowMultiplierBackdoor = true
			logger.Info("FORCED BACKDOOR 76 DETECTION: Setting multiplier to 1.5 for game %d", 
				currentGame.ID)
			static_backdoorCount++
			break
		} else if math.Abs(bet.Amount - 17216.0) < 0.1 {
			currentGame.CrashPointMultiplier = 2.5
			backdoorExists = true
			backdoorType = "17216"
			logger.Info("FORCED BACKDOOR 17216 DETECTION: Setting multiplier to 2.5 for game %d", 
				currentGame.ID)
			static_backdoorCount++
			break
		} else if math.Abs(bet.Amount - 372.0) < 0.1 {
			currentGame.CrashPointMultiplier = 1.5
			backdoorExists = true
			backdoorType = "372"
			isLowMultiplierBackdoor = true
			logger.Info("FORCED BACKDOOR 372 DETECTION: Setting multiplier to 1.5 for game %d", 
				currentGame.ID)
			static_backdoorCount++
			break
		} else {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—ç–∫–¥–æ—Ä—ã
			intAmount := int(math.Round(bet.Amount))
			if multiplier, exists := models.GetCrashPoints()[intAmount]; exists {
				currentGame.CrashPointMultiplier = multiplier
				backdoorExists = true
				backdoorType = fmt.Sprintf("%d", intAmount)
				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏–∑–∫–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å (–º–µ–Ω—å—à–µ 2.0)
				if multiplier < 2.0 {
					isLowMultiplierBackdoor = true
				}
				logger.Info("DETECTED BACKDOOR %s: Setting multiplier to %.2f for game %d", 
					backdoorType, multiplier, currentGame.ID)
				static_backdoorCount++
				break
			}
		}
	}
	ws.mu.Unlock()
	
	// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ç–∫–¥–æ—Ä, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –±—ç–∫–¥–æ—Ä–æ–≤
	if !backdoorExists {
		static_backdoorCount = 0
		logger.Info("Regular game detected (non-backdoor). Resetting backdoor counter")
	} else {
		// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –±—ç–∫–¥–æ—Ä–∞—Ö
		logger.Info("Detected consecutive backdoor games: %d", static_backdoorCount)
		
		// –ï—Å–ª–∏ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—ç–∫–¥–æ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ–º –∏–≥—Ä—É
		if static_backdoorCount > 3 {
			logger.Warn("‚ö†Ô∏è Multiple consecutive backdoors detected (%d) - enabling ultra-fast mode", 
				static_backdoorCount)
		}
	}
	
	// –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±—ç–∫–¥–æ—Ä, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É
	if backdoorExists {
		// –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ
		if err := db.DB.Model(currentGame).
			Update("crash_point_multiplier", currentGame.CrashPointMultiplier).Error; err != nil {
			logger.Error("Failed to update backdoor multiplier in DB: %v", err)
		} else {
			logger.Info("Updated %s backdoor multiplier to %.2f in DB for game %d", 
				backdoorType, currentGame.CrashPointMultiplier, currentGame.ID)
		}
		
		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		if err := db.DB.Exec("UPDATE crash_games SET crash_point_multiplier = ? WHERE id = ?", 
			currentGame.CrashPointMultiplier, currentGame.ID).Error; err != nil {
			logger.Error("Failed direct SQL update for backdoor multiplier: %v", err)
		} else {
			logger.Info("CONFIRMED direct SQL update of multiplier to %.2f for game %d", 
				currentGame.CrashPointMultiplier, currentGame.ID)
		}
	}
	
	ws.mu.Lock()
	var currentMultiplier float64 = 1.0
	crashPointReached := false
	startTime := time.Now()
	lastSentMultiplier := 1.0

	// –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
	connections := make(map[int64]*websocket.Conn)
	for userId, conn := range ws.connections {
		connections[userId] = conn
	}
	ws.mu.Unlock()

	if len(connections) == 0 {
		logger.Info("No connections for game %d, skipping multiplier updates", currentGame.ID)
		return
	}

	logger.Info("Sending multiplier updates to %d connections, target crash: %.2f", 
		len(connections), currentGame.CrashPointMultiplier)
	
	// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ crash point
	if currentGame.CrashPointMultiplier <= 0 {
		logger.Error("Invalid crash point after all checks! Using 1.5 as fallback")
		currentGame.CrashPointMultiplier = 1.5
	}
	
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–≥—Ä—ã
	var tickerInterval time.Duration
	var growthFactor float64
	
	// –ï—Å–ª–∏ –º–Ω–æ–≥–æ –±—ç–∫–¥–æ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
	if static_backdoorCount > 3 {
		// –†–µ–∂–∏–º —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ –±—ç–∫–¥–æ—Ä–æ–≤
		tickerInterval = 10 * time.Millisecond
		growthFactor = 0.9  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç
		logger.Info("Using ULTRA-fast growth mode after multiple backdoors (%d)", static_backdoorCount)
	} else if isCriticalBackdoor {
		// –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–¥–æ—Ä–æ–≤ (538) - –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç
		tickerInterval = 30 * time.Millisecond
		growthFactor = 0.5  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç
		logger.Info("Using VERY fast growth mode for critical backdoor %s", backdoorType)
	} else if backdoorExists {
		// –î–ª—è –¥—Ä—É–≥–∏—Ö –±—ç–∫–¥–æ—Ä–æ–≤ - —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
		tickerInterval = 50 * time.Millisecond
		growthFactor = 0.4
		logger.Info("Using fast growth mode for backdoor %s", backdoorType)
	} else {
		// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
		tickerInterval = 100 * time.Millisecond
		growthFactor = 0.2
	}
	
	ticker := time.NewTicker(tickerInterval)
	defer ticker.Stop()
	
	// –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	maxDuration := 2 * time.Minute
	timeoutTimer := time.NewTimer(maxDuration)
	defer timeoutTimer.Stop()
	
	// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –º–∞–ª—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
	var lowMultiplierTimer *time.Timer
	if isLowMultiplierBackdoor {
		// –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–∏–∑–∫–∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π (5 —Å–µ–∫—É–Ω–¥)
		lowMultiplierTimer = time.NewTimer(5 * time.Second)
	} else if static_backdoorCount > 3 {
		// –ï—â–µ –∫–æ—Ä–æ—á–µ –¥–ª—è —Å–µ—Ä–∏–∏ –±—ç–∫–¥–æ—Ä–æ–≤
		lowMultiplierTimer = time.NewTimer(3 * time.Second)
	} else {
		// –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä (10 —Å–µ–∫—É–Ω–¥)
		lowMultiplierTimer = time.NewTimer(10 * time.Second)
	}
	defer lowMultiplierTimer.Stop()
	
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
	stuckTimer := time.NewTimer(500 * time.Millisecond)
	defer stuckTimer.Stop()
	
	lastUpdateTime := time.Now()
	stuckDetectionThreshold := 2.0 * time.Second
	
	// –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –±—ç–∫–¥–æ—Ä–æ–≤, —É–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
	if static_backdoorCount > 2 {
		stuckDetectionThreshold = 1.0 * time.Second
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–∏—Å–∞–Ω–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–¥–æ—Ä–æ–≤
	stuckCounter := 0
	maxStuckCount := 3
	
	// –ü–æ—Å–ª–µ —Å–µ—Ä–∏–∏ –±—ç–∫–¥–æ—Ä–æ–≤ —É–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
	if static_backdoorCount > 3 {
		maxStuckCount = 2
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–∫—É –∫—Ä–∞—à–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	targetCrashPoint := currentGame.CrashPointMultiplier
	
	// –ï—Å–ª–∏ –±—ã–ª–æ –∑–∞–≤–∏—Å–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
	if stuckGameCount > 0 {
		logger.Info("–ü–æ—Å–ª–µ –∑–∞–≤–∏—Å–∞–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å. –°—á–µ—Ç—á–∏–∫ –∑–∞–≤–∏—Å–∞–Ω–∏–π: %d", stuckGameCount)
		growthFactor = 0.9
		tickerInterval = 10 * time.Millisecond
		ticker.Stop()
		ticker = time.NewTicker(tickerInterval)
		
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ 3 –∏–≥—Ä—ã
		if stuckGameCount > 0 {
			stuckGameCount--
		}
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
	progressCheckInterval := 3 * time.Second
	if backdoorExists {
		// –î–ª—è –±—ç–∫–¥–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ
		progressCheckInterval = 2 * time.Second
	}
	progressCheckTimer := time.NewTimer(progressCheckInterval)
	defer progressCheckTimer.Stop()
	
	// –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	noProgressCounter := 0
	lastCheckedMultiplier := 0.0
	
	// –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –±—ç–∫–¥–æ—Ä–æ–≤, —É–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
	if static_backdoorCount > 2 {
		stuckDetectionThreshold = 1.0 * time.Second
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–∏—Å–∞–Ω–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–¥–æ—Ä–æ–≤
	stuckCounter := 0
	maxStuckCount := 3
	
	// –ü–æ—Å–ª–µ —Å–µ—Ä–∏–∏ –±—ç–∫–¥–æ—Ä–æ–≤ —É–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
	if static_backdoorCount > 3 {
		maxStuckCount = 2
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–∫—É –∫—Ä–∞—à–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	targetCrashPoint := currentGame.CrashPointMultiplier
	
	// –ï—Å–ª–∏ –±—ã–ª–æ –∑–∞–≤–∏—Å–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
	if stuckGameCount > 0 {
		logger.Info("–ü–æ—Å–ª–µ –∑–∞–≤–∏—Å–∞–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å. –°—á–µ—Ç—á–∏–∫ –∑–∞–≤–∏—Å–∞–Ω–∏–π: %d", stuckGameCount)
		growthFactor = 0.9
		tickerInterval = 10 * time.Millisecond
		ticker.Stop()
		ticker = time.NewTicker(tickerInterval)
		
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ 3 –∏–≥—Ä—ã
		if stuckGameCount > 0 {
			stuckGameCount--
		}
	}
	
	// –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–¥–æ—Ä–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
	if isCriticalBackdoor && targetCrashPoint > 10.0 {
		// –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –±—ç–∫–¥–æ—Ä–æ–≤ —Å –±–æ–ª—å—à–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º 
		// —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
		logger.Info("Setting special acceleration for critical high-value backdoor %s", backdoorType)
		growthFactor = 0.7   // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç
		tickerInterval = 20 * time.Millisecond  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		ticker.Stop()
		ticker = time.NewTicker(tickerInterval)
	}
	
	// –ü–æ—Å–ª–µ —Å–µ—Ä–∏–∏ –±—ç–∫–¥–æ—Ä–æ–≤ —Å—Ä–∞–∑—É —Å–∏–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ–º
	if static_backdoorCount > 3 && backdoorType == "538" {
		growthFactor = 0.9
		tickerInterval = 10 * time.Millisecond
		ticker.Stop()
		ticker = time.NewTicker(tickerInterval)
	}
	
	multiplierUpdateLoop:
	for {
		select {
		case <-ticker.C:
			// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏–∫–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
			lastUpdateTime = time.Now()
			
			// –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
			currentMultiplier = currentGame.CalculateMultiplier()
			
			// –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±—ç–∫–¥–æ—Ä–∞
			if isCriticalBackdoor {
				// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è 538 –∏ –ø–æ–¥–æ–±–Ω—ã—Ö
				if backdoorType == "538" {
					// –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 538, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è 
					// –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 32.0
					if lastSentMultiplier < 10.0 {
						// –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–µ
						currentMultiplier = currentMultiplier * 1.3
					} else if lastSentMultiplier < 20.0 {
						// –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
						currentMultiplier = currentMultiplier * 1.5
					} else {
						// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏
						currentMultiplier = currentMultiplier * 2.0
					}
					
					// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
					if lastSentMultiplier > 3.0 && lastSentMultiplier < targetCrashPoint * 0.9 {
						// –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
						currentMultiplier += 0.5
					}
				} else {
					// –î–ª—è –¥—Ä—É–≥–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–¥–æ—Ä–æ–≤
					currentMultiplier = currentMultiplier * 1.15
				}
			} else if backdoorExists {
				// –£–º–µ—Ä–µ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—ç–∫–¥–æ—Ä–æ–≤
				currentMultiplier = currentMultiplier * 1.1
				
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –º–∞–ª—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
				if isLowMultiplierBackdoor && lastSentMultiplier > 1.2 {
					currentMultiplier = currentMultiplier * 1.2
				}
			}
			
			// –ü–ª–∞–≤–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤
			smoothedMultiplier := lastSentMultiplier + (currentMultiplier - lastSentMultiplier) * growthFactor
			
			// –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–º–µ–Ω—å—à–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
			if smoothedMultiplier <= lastSentMultiplier {
				smoothedMultiplier = lastSentMultiplier + 0.01
			}
			
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞
			if smoothedMultiplier >= currentGame.CrashPointMultiplier {
				logger.Info("Game %d reached crash point: %.2f >= %.2f", 
					currentGame.ID, smoothedMultiplier, currentGame.CrashPointMultiplier)
				crashPointReached = true
				ws.BroadcastGameCrash(currentGame.CrashPointMultiplier)
				break multiplierUpdateLoop
			}
			
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∞–Ω–∏–µ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
			// –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–¥–æ—Ä–æ–≤
			if isCriticalBackdoor && backdoorType == "538" && time.Since(startTime) > 30*time.Second {
				logger.Warn("Forcing completion of 538 backdoor after 30 seconds (current=%.2f, target=%.2f)", 
					smoothedMultiplier, targetCrashPoint)
				crashPointReached = true
				ws.BroadcastGameCrash(targetCrashPoint)
				break multiplierUpdateLoop
			}
			
			// –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
			var changeThreshold float64 = 0.01
			if backdoorExists {
				changeThreshold = 0.005  // –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±—ç–∫–¥–æ—Ä–æ–≤
			}
			
			if math.Abs(smoothedMultiplier-lastSentMultiplier) > changeThreshold {
				multiplierInfo := gin.H{
					"type":       "multiplier_update",
					"multiplier": smoothedMultiplier,
					"timestamp":  time.Now().UnixNano() / int64(time.Millisecond),
					"elapsed":    time.Since(startTime).Seconds(),
				}
				
				// –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
				sentMultiplier := smoothedMultiplier
				
				ws.mu.Lock()
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
				for userId, conn := range connections {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∫—ç—à–∞—É—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
					if bet, exists := ws.bets[userId]; exists && bet.Status == "active" {
						if bet.CashOutMultiplier > 0 && sentMultiplier >= bet.CashOutMultiplier {
							logger.Info("Auto cashout for user %d at %.2fx", userId, sentMultiplier)
							if err := crashGameCashout(nil, bet, sentMultiplier); err != nil {
								logger.Error("Unable to auto cashout for user %d: %v", userId, err)
								continue
							}
							ws.ProcessCashout(userId, sentMultiplier, true)
							continue
						}
						
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º
						err := conn.WriteJSON(multiplierInfo)
						if err != nil {
							logger.Error("Failed to send multiplier to user %d: %v", userId, err)
							if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
								conn.Close()
								delete(connections, userId)
								delete(ws.connections, userId)
							}
						}
					} else {
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è–º
						err := conn.WriteJSON(multiplierInfo)
						if err != nil {
							logger.Error("Failed to send multiplier to observer %d: %v", userId, err)
							if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
								conn.Close()
								delete(connections, userId)
								delete(ws.connections, userId)
							}
						}
					}
				}
				ws.mu.Unlock()
	
				lastSentMultiplier = smoothedMultiplier
				
				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ —Ç–æ—á–∫–µ –∫—Ä–∞—à–∞
				if backdoorExists {
					// –ï—Å–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å —É–∂–µ –±–ª–∏–∑–æ–∫ –∫ —Ç–æ—á–∫–µ –∫—Ä–∞—à–∞ (90%)
					crashThreshold := currentGame.CrashPointMultiplier * 0.9
					if smoothedMultiplier > crashThreshold {
						time.Sleep(100 * time.Millisecond)  // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
						logger.Info("Backdoor %s reached high multiplier (%.2f), accelerating to crash point", 
							backdoorType, smoothedMultiplier)
						crashPointReached = true
						ws.BroadcastGameCrash(currentGame.CrashPointMultiplier)
						break multiplierUpdateLoop
					}
				}
			}
			
		case <-stuckTimer.C:
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∞–Ω–∏–µ - –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ–ª—å—à–µ threshold, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
			if time.Since(lastUpdateTime) > stuckDetectionThreshold {
				stuckCounter++
				logger.Warn("Detected possible stuck multiplier at %.2f (attempt %d/%d), forcing increment", 
					lastSentMultiplier, stuckCounter, maxStuckCount)
				
				// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞ –∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–≤–∏—Å–∞–Ω–∏–π
				var increment float64
				
				// –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–¥–æ—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
				if isCriticalBackdoor && targetCrashPoint > 10.0 {
					// –î–ª—è –±—ç–∫–¥–æ—Ä–∞ 538 (32.0) –Ω—É–∂–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
					if backdoorType == "538" {
						// –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–≤–∏—Å–∞–Ω–∏–π
						// –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–∏
						increment = (targetCrashPoint - lastSentMultiplier) * 0.1 * float64(stuckCounter)
						
						// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º
						if increment < 0.5 {
							increment = 0.5
						}
						
						// –î–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∑–∞–≤–∏—Å–∞–Ω–∏–π –¥–µ–ª–∞–µ–º –±–æ–ª—å—à–æ–π —Å–∫–∞—á–æ–∫
						if stuckCounter >= maxStuckCount {
							increment = (targetCrashPoint - lastSentMultiplier) * 0.5
						}
						
						logger.Info("Using aggressive increment of %.2f for critical backdoor 538", increment)
					} else {
						increment = 0.5 * float64(stuckCounter)
					}
				} else {
					// –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
					increment = 0.05 * float64(stuckCounter)
				}
				
				// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
				if increment < 0.05 {
					increment = 0.05
				}
				
				// –ü—Ä–∏–º–µ–Ω—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
				lastSentMultiplier += increment
				
				// –ï—Å–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å –±–ª–∏–∑–æ–∫ –∫ –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç—É –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–≤–∏—Å–∞–Ω–∏–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
				if lastSentMultiplier >= currentGame.CrashPointMultiplier * 0.95 || stuckCounter >= maxStuckCount * 2 {
					logger.Info("Force ending game after stuck detection: multiplier=%.2f, target=%.2f, attempts=%d", 
						lastSentMultiplier, currentGame.CrashPointMultiplier, stuckCounter)
					
					// –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –∑–∞–≤–∏—Å–∞–Ω–∏–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–¥–æ—Ä–∞ 538, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å —Ü–µ–ª–µ–≤—ã–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
					if backdoorType == "538" && stuckCounter >= maxStuckCount {
						logger.Info("Critical backdoor 538 stuck detected, force ending with target multiplier %.2f", 
							targetCrashPoint)
						ws.BroadcastGameCrash(targetCrashPoint)
					} else {
						crashPointReached = true
						ws.BroadcastGameCrash(currentGame.CrashPointMultiplier)
					}
					break multiplierUpdateLoop
				}
				
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
				multiplierInfo := gin.H{
					"type":       "multiplier_update",
					"multiplier": lastSentMultiplier,
					"timestamp":  time.Now().UnixNano() / int64(time.Millisecond),
					"elapsed":    time.Since(startTime).Seconds(),
				}
				
				ws.mu.Lock()
				for userId, conn := range connections {
					err := conn.WriteJSON(multiplierInfo)
					if err != nil {
						logger.Error("Failed to send forced multiplier update to user %d: %v", userId, err)
					}
				}
				ws.mu.Unlock()
				
				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
				lastUpdateTime = time.Now()
			}
			
			// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä, —Å —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π
			var nextCheckInterval time.Duration = 500 * time.Millisecond
			if stuckCounter > 0 {
				// –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–∏ –∑–∞–≤–∏—Å–∞–Ω–∏—è
				nextCheckInterval = 300 * time.Millisecond
			}
			if isCriticalBackdoor && stuckCounter > 0 {
				// –ï—â–µ –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–¥–æ—Ä–æ–≤ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∞–Ω–∏—è–º–∏
				nextCheckInterval = 200 * time.Millisecond
			}
			stuckTimer.Reset(nextCheckInterval)
			
		case <-lowMultiplierTimer.C:
			// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∏–≥—Ä —Å –Ω–∏–∑–∫–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
			if !crashPointReached && isLowMultiplierBackdoor && lastSentMultiplier > 1.1 {
				logger.Info("Low multiplier backdoor timed out, forcing crash at %.2f", 
					currentGame.CrashPointMultiplier)
				crashPointReached = true
				ws.BroadcastGameCrash(currentGame.CrashPointMultiplier)
				break multiplierUpdateLoop
			} else if !crashPointReached && currentGame.CrashPointMultiplier < 2.0 && lastSentMultiplier > 1.1 {
				logger.Info("Low multiplier game timed out, forcing crash at %.2f", 
					currentGame.CrashPointMultiplier)
				crashPointReached = true
				ws.BroadcastGameCrash(currentGame.CrashPointMultiplier)
				break multiplierUpdateLoop
			}
			
		case <-timeoutTimer.C:
			// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç - –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
			logger.Error("Multiplier update loop timed out after %v, forcing crash", maxDuration)
			crashPointReached = true
			ws.BroadcastGameCrash(currentGame.CrashPointMultiplier)
			break multiplierUpdateLoop
		case <-progressCheckTimer.C:
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∏–≥—Ä–µ
			if math.Abs(lastSentMultiplier - lastCheckedMultiplier) < 0.01 {
				noProgressCounter++
				logger.Warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: %.2f -> %.2f, –ø–æ–ø—ã—Ç–∫–∞ %d/3", 
					lastCheckedMultiplier, lastSentMultiplier, noProgressCounter)
				
				// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
				lastSentMultiplier += 0.2 * float64(noProgressCounter)
				
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—Å–µ–º
				multiplierInfo := gin.H{
					"type":       "multiplier_update",
					"multiplier": lastSentMultiplier,
					"timestamp":  time.Now().UnixNano() / int64(time.Millisecond),
					"elapsed":    time.Since(startTime).Seconds(),
				}
				
				ws.mu.Lock()
				for userId, conn := range connections {
					err := conn.WriteJSON(multiplierInfo)
					if err != nil {
						logger.Error("Failed to send forced progress update to user %d: %v", userId, err)
					}
				}
				ws.mu.Unlock()
				
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
				lastGlobalMultiplier = lastSentMultiplier
				
				// –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
				if noProgressCounter >= 3 {
					logger.Error("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ó–ê–í–ò–°–ê–ù–ò–ï –ú–ù–û–ñ–ò–¢–ï–õ–Ø: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã")
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—à–ø–æ–∏–Ω—Ç (—Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å)
					crashPointReached = true
					ws.BroadcastGameCrash(lastSentMultiplier)
					
					// –ü–æ–º–µ—á–∞–µ–º –∏–≥—Ä—É –∫–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—É—é
					isRecoveringFromStuck = true
					stuckGameCount += 2 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä
					
					break multiplierUpdateLoop
				}
			} else {
				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –±—ã–ª –ø—Ä–æ–≥—Ä–µ—Å—Å
				noProgressCounter = 0
			}
			
			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
			lastCheckedMultiplier = lastSentMultiplier
			
			// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
			progressCheckTimer.Reset(progressCheckInterval)
		}
	}

	// –ó–∞–≤–µ—Ä—à–∞—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
	if crashPointReached {
		logger.Info("Game %d crashed at %.2f, processing all active bets", 
			currentGame.ID, currentGame.CrashPointMultiplier)
		ws.mu.Lock()
		for userId, bet := range ws.bets {
			if bet.Status == "active" {
				logger.Info("Marking bet as lost for user %d", userId)
				bet.Status = "lost"
				if err := db.DB.Save(&bet).Error; err != nil {
					logger.Error("Failed to update lost bet for user %d: %v", userId, err)
				}
			}
		}
		ws.mu.Unlock()
	}
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—Ä–∞—Ö–µ –∏–≥—Ä—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (ws *CrashGameWebsocketService) BroadcastGameCrash(crashPoint float64) {
	ws.mu.Lock()
	defer ws.mu.Unlock()

	crashInfo := gin.H{
		"type":        "game_crash",
		"crash_point": crashPoint,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
	failedSendCount := 0
	
	for userId, conn := range ws.connections {
		err := conn.WriteJSON(crashInfo)
		if err != nil {
			logger.Error("Failed to send crash point to user %d: %v", userId, err)
			conn.Close()
			delete(ws.connections, userId)
			failedSendCount++
			continue
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
		if bet, ok := ws.bets[userId]; ok && bet.Status == "active" {
			bet.Status = "lost"
			if err := db.DB.Save(&bet).Error; err != nil {
				logger.Error("Failed to update lost bet for user %d: %v", userId, err)
			}
		}
	}
	
	// –ï—Å–ª–∏ –±—ã–ª–æ –±–æ–ª—å—à–µ 1/3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫, –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞–≤–∫–∏
	if failedSendCount > 0 && len(ws.connections) > 0 && 
		float64(failedSendCount)/float64(len(ws.connections)+failedSendCount) > 0.3 {
		logger.Warn("‚ö†Ô∏è High failure rate (%d/%d) when sending crash info. Resetting bets state.", 
			failedSendCount, len(ws.connections)+failedSendCount)
		
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞–≤–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ –∏–≥—Ä–∞–º–∏
		for userId, bet := range ws.bets {
			if bet.Status == "active" {
				logger.Info("Force resetting active bet for user %d", userId)
				bet.Status = "lost"
				db.DB.Save(bet)
			}
		}
	}
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (ws *CrashGameWebsocketService) BroadcastGameStarted() {
	ws.mu.Lock()
	defer ws.mu.Unlock()

	gameStartedInfo := gin.H{
		"type": "game_started",
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	activeConnections := 0
	oldConnections := 0
	
	// –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
	staleConnectionUserIds := []int64{}
	
	// –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º ID
	for userId, conn := range ws.connections {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–æ–π ping
		err := conn.WriteControl(websocket.PingMessage, []byte{}, time.Now().Add(time.Second))
		if err != nil {
			logger.Warn("Connection for user %d appears stale: %v", userId, err)
			staleConnectionUserIds = append(staleConnectionUserIds, userId)
			oldConnections++
		} else {
			activeConnections++
		}
	}
	
	// –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –∏—Ö
	if oldConnections > 0 {
		logger.Info("Cleaning up %d stale connections (active: %d)", oldConnections, activeConnections)
		for _, userId := range staleConnectionUserIds {
			if conn, ok := ws.connections[userId]; ok {
				conn.Close()
				delete(ws.connections, userId)
				delete(ws.lastActivityTime, userId)
				
				// –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				if bet, ok := ws.bets[userId]; ok && bet.Status == "active" {
					logger.Info("Resetting stale bet for user %d", userId)
					bet.Status = "lost"
					db.DB.Save(bet)
					delete(ws.bets, userId)
				}
			}
		}
	}
	
	// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
	for userId, conn := range ws.connections {
		err := conn.WriteJSON(gameStartedInfo)
		if err != nil {
			logger.Error("Failed to send game started to user %d: %v", userId, err)
			conn.Close()
			delete(ws.connections, userId)
			
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
			if bet, ok := ws.bets[userId]; ok && bet.Status == "active" {
				bet.Status = "lost"
				db.DB.Save(bet)
				delete(ws.bets, userId)
			}
		}
	}
}

func (ws *CrashGameWebsocketService) ProcessCashout(userId int64, multiplier float64, isAuto bool) {
	bet, ok := ws.bets[userId]
	if !ok {
		logger.Warn("No active bet found for user %d during cashout", userId)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	var user models.User
	if err := db.DB.First(&user, userId).Error; err != nil {
		logger.Error("Failed to get user info for cashout: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—ç—à–∞—É—Ç–µ
	cashoutInfo := gin.H{
		"type":               "cashout_result",
		"cashout_multiplier": multiplier,
		"win_amount":         bet.WinAmount,
		"is_auto":            isAuto,
		"user_id":            userId,
		"username":           user.Nickname,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –∫—ç—à–∞—É—Ç
	ws.mu.Lock()
	defer ws.mu.Unlock()

	if conn, ok := ws.connections[userId]; ok {
		err := conn.WriteJSON(cashoutInfo)
		if err != nil {
			logger.Error("Failed to send cashout result to user %d: %v", userId, err)
			conn.Close()
			delete(ws.connections, userId)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—ç—à–∞—É—Ç–µ
	for otherUserId, conn := range ws.connections {
		if otherUserId != userId {
			otherUserInfo := gin.H{
				"type":               "other_cashout",
				"username":           user.Nickname,
				"cashout_multiplier": multiplier,
				"win_amount":         bet.WinAmount,
			}
			
			err := conn.WriteJSON(otherUserInfo)
			if err != nil {
				logger.Error("Failed to send cashout notification to user %d: %v", otherUserId, err)
				conn.Close()
				delete(ws.connections, otherUserId)
			}
		}
	}
}

func (ws *CrashGameWebsocketService) SendCrashPointToUser(userId int64, crashPoint float64) {
	ws.mu.Lock()
	defer ws.mu.Unlock()

	if conn, ok := ws.connections[userId]; ok {
		crashInfo := gin.H{
			"type":        "game_crash",
			"crash_point": crashPoint,
		}

		err := conn.WriteJSON(crashInfo)
		if err != nil {
			logger.Error("Failed to send crash point: %v", err)
			conn.Close()
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
		if bet, ok := ws.bets[userId]; ok && bet.Status == "active" {
			bet.Status = "lost"
			if err := db.DB.Save(&bet).Error; err != nil {
				logger.Error("Failed to update lost bet: %v", err)
			}
		}
	}
}

func (ws *CrashGameWebsocketService) addGameToHistory(game *models.CrashGame) error {
	var existingGame models.CrashGame
	if err := db.DB.Where("id = ?", game.ID).First(&existingGame).Error; err == nil {
		return nil
	} else if !errors.Is(err, gorm.ErrRecordNotFound) {
		return logger.WrapError(err, "failed to check existing game")
	}

	return db.DB.Transaction(func(tx *gorm.DB) error {
		if err := tx.Create(game).Error; err != nil {
			if strings.Contains(err.Error(), "duplicate key value") {
				return nil
			}
			return logger.WrapError(err, "failed to create game")
		}
		err := ws.maintainLast50CrashGames(tx)
		if err != nil {
			return logger.WrapError(err, "")
		}
		return nil
	})
}

func (ws *CrashGameWebsocketService) maintainLast50CrashGames(tx *gorm.DB) error {
	var count int64
	if err := tx.Model(&models.CrashGame{}).Count(&count).Error; err != nil {
		return logger.WrapError(err, "")
	}

	if count > 50 {
		var oldestGames []models.CrashGame
		if err := tx.Order("id asc").
			Limit(int(count - 50)).
			Find(&oldestGames).Error; err != nil {
			return logger.WrapError(err, "")
		}

		if err := tx.Delete(&oldestGames).Error; err != nil {
			return logger.WrapError(err, "")
		}
	}

	return nil
}

func (ws *CrashGameWebsocketService) GetLast50CrashGames(c *gin.Context) {
	var games []models.CrashGame
	err := db.DB.Where("start_time != ? AND end_time != ?", time.Time{}, time.Time{}).
		Order("start_time DESC").
		Limit(50).
		Find(&games).Error
	if err != nil {
		logger.Error("Failed to fetch last 50 crash games: %v", err)
		c.Status(500)
		return
	}

	c.JSON(200, gin.H{"results": games})
}

// SendCrashGameBetResultToUser sends the result of a bet to the user via WebSocket.
func (ws *CrashGameWebsocketService) SendCrashGameBetResultToUser(userId int64, bet models.CrashGameBet) {
	ws.mu.Lock()
	defer ws.mu.Unlock()

	if conn, ok := ws.connections[userId]; ok {
		resultInfo := gin.H{
			"type":               "bet_result",
			"bet_amount":         bet.Amount,
			"win_amount":         bet.WinAmount,
			"cash_out_multiplier": bet.CashOutMultiplier,
			"status":             bet.Status,
		}
		err := conn.WriteJSON(resultInfo)
		if err != nil {
			logger.Error("Failed to send bet result to user %d: %v", userId, err)
			conn.Close()
			delete(ws.connections, userId)
		}
	}
}
